name: Credential Verification

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run daily at 8 AM UTC to verify credentials are still valid
    - cron: '0 8 * * *'

env:
  NODE_VERSION: '20.x'
  AWS_REGION: us-west-2

jobs:
  verify-prerequisites:
    name: Verify External Service Prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Verify All External Services
        env:
          # Neo4j Credentials
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
          
          # AWS Credentials
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          # Weather API Credentials
          VISUALCROSSING_API_KEY: ${{ secrets.VISUALCROSSING_API_KEY }}
          VISUALCROSSING_API_URL: ${{ secrets.VISUALCROSSING_API_URL }}
          NOAA_API_TOKEN: ${{ secrets.NOAA_API_TOKEN }}
          NOAA_API_URL: ${{ secrets.NOAA_API_URL }}
          
          # GitHub Configuration
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          
          # Vault Decryption Key (for production)
          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
        run: |
          echo "üîê Verifying external service credentials..."
          npm run verify:all
          
      - name: Upload Verification Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: credential-verification-report
          path: credential-verification-report.json
          retention-days: 7

      - name: Check for Credential Leaks
        run: |
          echo "üîç Scanning for credential leaks..."
          npx detect-secrets scan --baseline .secrets.baseline || true
          
      - name: Gate Check
        if: failure()
        run: |
          echo "::error::‚ùå External services not configured properly. Story 1.0 prerequisites not met."
          echo "::error::Please ensure all credentials are properly configured in GitHub Secrets."
          exit 1

  test-credential-management:
    name: Test Credential Management System
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Credential Tests
        env:
          NODE_ENV: test
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "üß™ Running credential management tests..."
          npm run test:unit -- src/tests/credentials.test.ts

      - name: Test AWS Secrets Manager Integration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "üîê Testing AWS Secrets Manager integration..."
          npm run test:integration -- src/tests/integration/secrets-manager.test.ts

  security-scan:
    name: Security Scan
    needs: verify-prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: TruffleHog OSS Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-deployment-readiness:
    name: Validate Deployment Readiness
    needs: [verify-prerequisites, test-credential-management, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate AWS Secrets Manager Access
        run: |
          echo "üîì Validating AWS Secrets Manager access..."
          aws secretsmanager list-secrets --filter Key=name,Values=farmforecast/ || true

      - name: Deployment Gate Check
        run: |
          echo "‚úÖ All credential checks passed!"
          echo "‚úÖ Security scans completed!"
          echo "‚úÖ Ready for deployment!"

  notify-on-failure:
    name: Notify on Failure
    needs: [verify-prerequisites, test-credential-management, security-scan]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Create Issue for Failed Verification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = 'üö® Credential Verification Failed';
            const body = `
            ## Credential Verification Failed
            
            **Workflow Run:** [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            
            ### Action Required
            1. Check GitHub Secrets configuration
            2. Verify all external service accounts are active
            3. Review the verification report artifact
            
            ### Affected Services
            Please check the workflow logs for specific service failures.
            
            cc: @${context.actor}
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'credentials', 'high-priority']
            });